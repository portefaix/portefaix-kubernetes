# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
ingress:
  enabled: true
  entries:
  - name: mimir-external
    host: mimir.home.portefaix.xyz
    # className: nginx
    className: traefik
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web
      # traefik.ingress.kubernetes.io/router.tls: "true"
    labels: {}
  - name: mimir-cloudflare
    host: mimir.homelab.k3s.portefaix.xyz
    # className: nginx
    className: traefik
    annotations:
      external-dns.alpha.kubernetes.io/hostname: mimir.homelab.k3s.portefaix.xyz
      # nginx.ingress.kubernetes.io/auth-url: |-
      #   http://authentik.identity.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
      # nginx.ingress.kubernetes.io/auth-signin: |-
      #   https://auth.homelab.portefaix.xyz/outpost.goauthentik.io/start?rd=$escaped_request_uri
      # nginx.ingress.kubernetes.io/auth-response-headers: |-
      #   Set-Cookie,X-authentik-username,X-authentik-uid
      # nginx.ingress.kubernetes.io/auth-snippet: |
      #   proxy_set_header X-Forwarded-Host $http_host;
      traefik.ingress.kubernetes.io/router.entrypoints: web
      # traefik.ingress.kubernetes.io/router.tls: "true"
    labels:
      external-dns.io/provider: cloudflare

mimir-distributed:
  global:
    extraEnvFrom:
    - secretRef:
        name: mimir-cloudflare-credentials
    extraEnv:
    - name: JAEGER_AGENT_HOST
      value: "tempo-distributor.tracing.svc.cluster.local"
    - name: JAEGER_AGENT_PORT
      value: "6831"
    - name: JAEGER_SAMPLER_TYPE
      value: "const"
    - name: JAEGER_DISABLED
      value: "false"
    - name: JAEGER_SERVICE_NAME
      value: "mimir"

  rbac:
    type: not

  mimir:
    structuredConfig:
      common:
        storage:
          backend: s3
          s3:
            access_key_id: ${AWS_ACCESS_KEY_ID}
            secret_access_key: ${AWS_SECRET_ACCESS_KEY}
            endpoint: ${AWS_S3_ENDPOINT_NO_HTTPS}
            insecure: false

      memberlist:
        abort_if_cluster_join_fails: true

      ingester:
        ring:
          unregister_on_shutdown: true
          # replication_factor: 3

      limits:
        max_query_parallelism: 224
        max_global_series_per_user: 0
        ingestion_rate: 0
        compactor_blocks_retention_period: 30d
        out_of_order_time_window: 1h
        ruler_max_rules_per_rule_group: 40 # 0 to disable
        ruler_max_rule_groups_per_tenant: 500 # 0 to disable

      alertmanager_storage:
        backend: s3
        s3:
          bucket_name: portefaix-homelab-metrics-alert

      blocks_storage:
        backend: s3
        s3:
          bucket_name: portefaix-homelab-metrics-tsdb

      ruler_storage:
        backend: s3
        s3:
          bucket_name: portefaix-homelab-metrics-ruler

      server:
        log_level: info
        log_format: json

  runtimeConfig:
    ingester_limits: # limits that each ingester replica enforces
      max_ingestion_rate: 0 # unlimited
      max_series: 0 # unlimited
      max_tenants: 1000
      max_inflight_push_requests: 30000
    distributor_limits: # limits that each distributor replica enforces
      max_ingestion_rate: 0 # unlimited
      max_inflight_push_requests: 30000
      max_inflight_push_requests_bytes: 50000000
    overrides:
      # limits for tenant portefaix-talos-homelab that the whole cluster enforces
      portefaix-talos-homelab:
        ingestion_tenant_shard_size: 9
        max_global_series_per_user: 1500000
        max_fetched_series_per_query: 100000

  alertmanager:
    replicas: 1
    resources:
      limits:
        # cpu: 50m
        memory: 120Mi
      requests:
        cpu: 50m
        memory: 60Mi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 100Mi
      storageClass: nfs-client
    statefulSet:
      enabled: true
    zoneAwareReplication:
      enabled: false

  distributor:
    replicas: 2
    resources:
      limits:
        # cpu: 150m
        memory: 2Gi
      requests:
        cpu: 200m
        memory: 100Mi
    affinity: {}
    nodeSelector:
      node-role.kubernetes.io/infra: "true"
      # kubernetes.io/arch: amd64

  ingester:
    replicas: 3
    resources:
      limits:
        # cpu: 150m
        memory: 3Gi
      requests:
        cpu: 150m
        memory: 1Gi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: local-path
    zoneAwareReplication:
      enabled: false
    nodeSelector:
      node-role.kubernetes.io/infra: "true"
      # kubernetes.io/arch: amd64

  overrides_exporter:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 150Mi
      requests:
        cpu: 10m
        memory: 50Mi

  ruler:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 500Mi
      requests:
        cpu: 20m
        memory: 250Mi

  querier:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 50Mi
    affinity: {}

  query_frontend:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 50Mi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client

  query_scheduler:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 50Mi

  rollout_operator:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 50Mi

  store_gateway:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    affinity: {}
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client
    zoneAwareReplication:
      enabled: false

  compactor:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
    affinity: {}
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: local-path
    nodeSelector:
      node-role.kubernetes.io/infra: "true"
      # kubernetes.io/arch: amd64

  memcachedExporter:
    enabled: true
    resources:
      limits:
        # cpu: 150m
        memory: 125Mi
      requests:
        cpu: 20m
        memory: 50Mi

  gateway:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 50Mi
    ingress:
      enabled: true
      # ingressClassName: nginx
      ingressClassName: traefik
      hosts:
      - host: mimir.192.168.0.61.nip.io
        paths:
        - path: /
          pathType: Prefix
      tls: []
    affinity: null

  metaMonitoring:
    serviceMonitor:
      clusterLabel: portefaix-talos-homelab

mimir-mixin:
  additionalLabels:
    portefaix.xyz/version: v1.3.0

  additionalAnnotations: {}

  monitor:
    additionalLabels:
      prometheus.io/operator: portefaix

  grafana:
    folder: monitoring
