# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
port-k8s-exporter:
  extraLabels:
    portefaix.xyz/version: v1.3.0

  portBaseUrl: https://api.getport.io
  # overwriteConfigurationOnRestart: true

  secret:
    name: port-k8s-credentials
    useExistingSecret: true

  configMap:
    config: |
      resources:
      - kind: v1/namespaces # group/version/resource (G/V/R) format
        selector:
          query: .metadata.name | startswith("kube") | not # JQ boolean query. If evaluated to false - skip syncing the object.
        port:
          entity:
            mappings: # Mappings between one K8s object to one or many Port Entities. Each value is a JQ query.
              - identifier: .metadata.name + "-" + env.CLUSTER_NAME
                title: .metadata.name
                blueprint: '"namespace"'
                properties:
                  creationTimestamp: .metadata.creationTimestamp
                  labels: .metadata.labels
                relations:
                  Cluster: 'env.CLUSTER_NAME'

      - kind: v1/namespaces
        selector:
          query: .metadata.name | contains("kube-system")
        port:
          entity:
            mappings:
              - identifier: env.CLUSTER_NAME
                title: env.CLUSTER_NAME
                blueprint: '"cluster"'

      - kind: apps/v1/deployments
        selector:
          query: .metadata.namespace | startswith("kube") | not
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-Deployment-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                icon: '"Deployment"'
                blueprint: '"workload"'
                properties:
                  kind: '"Deployment"'
                  creationTimestamp: .metadata.creationTimestamp
                  replicas: .spec.replicas
                  hasPrivileged: .spec.template.spec.containers | [.[].securityContext.privileged] | any
                  hasLatest: .spec.template.spec.containers[].image | contains(":latest")
                  hasLimits: .spec.template.spec.containers | all(has("resources") and (.resources.limits.memory and .resources.limits.cpu))
                  strategyConfig: .spec.strategy // {}
                  strategy: .spec.strategy.type
                  availableReplicas: .status.availableReplicas
                  labels: .metadata.labels
                  containers: (.spec.template.spec.containers | map({name, image, resources}))
                  isHealthy: if .spec.replicas == .status.availableReplicas then "Healthy" else "Unhealthy" end
                relations:
                  Namespace: .metadata.namespace + "-" + env.CLUSTER_NAME

      - kind: apps/v1/daemonsets
        selector:
          query: .metadata.namespace | startswith("kube") | not
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-DaemonSet-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                blueprint: '"workload"'
                properties:
                  kind: '"DaemonSet"'
                  creationTimestamp: .metadata.creationTimestamp
                  replicas: .spec.replicas
                  strategyConfig: .spec.strategy // {}
                  availableReplicas: .status.availableReplicas
                  hasPrivileged: .spec.template.spec.containers | [.[].securityContext.privileged] | any
                  labels: .metadata.labels
                  hasLatest: .spec.template.spec.containers[].image | contains(":latest")
                  hasLimits: .spec.template.spec.containers | all(has("resources") and (.resources.limits.memory and .resources.limits.cpu))
                  containers: (.spec.template.spec.containers | map({name, image, resources}))
                  isHealthy: if .spec.replicas == .status.availableReplicas then "Healthy" else "Unhealthy" end
                relations:
                  Namespace: .metadata.namespace + "-" + env.CLUSTER_NAME

      - kind: apps/v1/statefulsets
        selector:
          query: .metadata.namespace | startswith("kube") | not
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-StatefulSet-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                blueprint: '"workload"'
                properties:
                  kind: '"StatefulSet"'
                  labels: .metadata.labels
                  creationTimestamp: .metadata.creationTimestamp
                  strategyConfig: .spec.strategy // {}
                  replicas: .spec.replicas
                  availableReplicas: .status.availableReplicas
                  hasLatest: .spec.template.spec.containers[].image | contains(":latest")
                  hasPrivileged: .spec.template.spec.containers | [.[].securityContext.privileged] | any
                  hasLimits: .spec.template.spec.containers | all(has("resources") and (.resources.limits.memory and .resources.limits.cpu))
                  containers: (.spec.template.spec.containers | map({name, image, resources}))
                  isHealthy: if .spec.replicas == .status.availableReplicas then "Healthy" else "Unhealthy" end
                relations:
                  Namespace: .metadata.namespace + "-" + env.CLUSTER_NAME

      - kind: apps/v1/replicasets
        selector:
          query: .metadata.namespace | startswith("kube") | not
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-ReplicaSet-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                icon: '"Deployment"'
                blueprint: '"replicaSet"'
                properties:
                  creationTimestamp: .metadata.creationTimestamp
                  replicas: .spec.replicas
                  hasPrivileged: .spec.template.spec.containers | [.[].securityContext.privileged] | any
                  hasLatest: .spec.template.spec.containers[].image | contains(":latest")
                  hasLimits: .spec.template.spec.containers | all(has("resources") and (.resources.limits.memory and .resources.limits.cpu))
                  strategy: .spec.strategy.type // ""
                  availableReplicas: .status.availableReplicas
                  labels: .metadata.labels
                  containers: (.spec.template.spec.containers | map({name, image, resources}))
                  isHealthy: if .spec.replicas == .status.availableReplicas then "Healthy" else "Unhealthy" end
                relations:
                  replicaSetManager: .metadata.ownerReferences[0].name + "-" + .metadata.ownerReferences[0].kind + "-" + .metadata.namespace + "-" + env.CLUSTER_NAME // []

      # Pods who are owned by replica-sets are connected directly to their deployment
      - kind: v1/pods
        selector:
          query: (.metadata.ownerReferences[0].kind == "ReplicaSet") and (.metadata.namespace | startswith("kube") | not)
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                icon: '"Microservices"'
                blueprint: '"pod"'
                properties:
                  startTime: .status.startTime
                  phase: .status.phase
                  labels: .metadata.labels
                  containers: (.spec.containers | map({image, resources})) + .status.containerStatuses | group_by(.image) | map(add)
                relations:
                  replicaSet: .metadata.ownerReferences[0].name + "-" + "ReplicaSet" + "-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                  Node: (.spec.nodeName) | (split(".")|join("_")) + "-" + env.CLUSTER_NAME // ""


      # Pods that are not managed by replicasets->deployments (daemonsets, statefulsets etc)
      - kind: v1/pods
        selector:
          query: (.metadata.ownerReferences[0].kind != "ReplicaSet") and (.metadata.namespace | startswith("kube") | not)
        port:
          entity:
            mappings:
              - identifier: .metadata.name + "-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                title: .metadata.name
                icon: '"Microservices"'
                blueprint: '"pod"'
                properties:
                  startTime: .status.startTime
                  phase: .status.phase
                  labels: .metadata.labels
                  containers: (.spec.containers | map({image, resources})) + .status.containerStatuses | group_by(.image) | map(add)
                relations:
                  workload: .metadata.ownerReferences[0].name + "-" + .metadata.ownerReferences[0].kind + "-" + .metadata.namespace + "-" + env.CLUSTER_NAME
                  Node: (.spec.nodeName) | (split(".")|join("_")) + "-" + env.CLUSTER_NAME

      - kind: v1/nodes
        port:
          entity:
            mappings:
              - identifier: (.metadata.name) | (split(".")|join("_")) + "-" + env.CLUSTER_NAME
                title: .metadata.name + "-" + env.CLUSTER_NAME
                icon: '"Node"'
                blueprint: '"node"'
                properties:
                  creationTimestamp: .metadata.creationTimestamp
                  totalCPU: .status.allocatable.cpu
                  totalMemory: .status.allocatable.memory
                  labels: .metadata.labels
                  kubeletVersion: .status.nodeInfo.kubeletVersion | split("-") | .[0]
                  ready: .status.conditions[] | select(.type == "Ready") | .status
                relations:
                  Cluster: env.CLUSTER_NAME

# port-ocean-argo-cd:
#   extraLabels:
#     portefaix.xyz/version: v1.3.0
#   port:
#     baseUrl: https://api.getport.io
#   secret:
#     create: false
#     name: port-ocean-argocd-credentials
#   # workload:
#   #   kind: Deployment
#   # scheduledResyncInterval: 120 # minutes
#   workload:
#     kind: CronJob
#   scheduledResyncInterval: "*/600 * * * *" # cron expression

port-ocean-terraform-cloud:
  extraLabels:
    portefaix.xyz/version: v1.3.0
  port:
    baseUrl: https://api.getport.io
  secret:
    create: false
    name: port-ocean-terraform-credentials
  workload:
    kind: Deployment
  scheduledResyncInterval: 600 # minutes
# workload:
#   kind: CronJob
# scheduledResyncInterval: "*/600 * * * *" # cron expression
