---
apiVersion: gateway.kgateway.dev/v1alpha1
kind: HTTPListenerPolicy
metadata:
  labels:
    {{- include "kgateway.labels" (index $.Subcharts "kgateway") | nindent 4 }}
  name: logging-policy
  namespace: {{ $.Release.Namespace }}
spec:
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: {{ .Values.gateway.name }}
  accessLog:
  - fileSink:
      path: /dev/stdout
      jsonFormat:
        start_time: "%START_TIME%"
        method: "%REQ(X-ENVOY-ORIGINAL-METHOD?:METHOD)%"
        path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
        protocol: "%PROTOCOL%"
        response_code: "%RESPONSE_CODE%"
        response_flags: "%RESPONSE_FLAGS%"
        bytes_received: "%BYTES_RECEIVED%"
        bytes_sent: "%BYTES_SENT%"
        total_duration: "%DURATION%"
        resp_backend_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
        req_x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
        user_agent: "%REQ(USER-AGENT)%"
        request_id: "%REQ(X-REQUEST-ID)%"
        authority: "%REQ(:AUTHORITY)%"
        backendHost: "%UPSTREAM_HOST%"
        backendCluster: "%UPSTREAM_CLUSTER%"
  {{ if .Values.gateway.opentelemetry.enabled -}}
  - openTelemetry:
      grpcService:
        backendRef:
          name: {{ .Values.gateway.opentelemetry.logging.name }}
          namespace: {{ .Values.gateway.opentelemetry.logging.namespace }}
          port: {{ .Values.gateway.opentelemetry.logging.port }}
        logName: "{{ .Values.gateway.name }}-gateway-access-logs"
      body: >-
        "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %RESPONSE_CODE% "%REQ(:AUTHORITY)%" "%UPSTREAM_CLUSTER%"'
  {{- end }}
