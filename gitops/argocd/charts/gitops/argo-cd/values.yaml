# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
ingress:
  enabled: false

grafana:
  # Grafana folder in which to store the dashboards
  folder: gitops

argo-cd:
  global:
    additionalLabels:
      portefaix.xyz/version: v1.3.0

    logging:
      format: json
      level: info

    securityContext:
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999

  configs:
    cm:
      admin.enabled: true
      application.instanceLabelKey: argocd.argoproj.io/instance
      exec.enabled: true
      server.rbac.log.enforce.enable: true
      statusbadge.enabled: true
      timeout.reconciliation: 180s

      resource.customizations.health.networking.k8s.io_Ingress: |
        hs = {}
        hs.status = "Healthy"
        return hs

      #
      # Check out this FAQ as to why this is needed.
      # https://argoproj.github.io/argo-cd/faq/#why-are-resources-of-type-sealedsecret-stuck-in-the-progressing-state
      #
      resource.customizations.health.bitnami.com_SealedSecret: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "Controller doesn't report resource status"
        return hs

      resource.customizations.health.certmanager.k8s.io-Certificate: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs

      resource.customizations.health.cert-manager.io_Certificate: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs

      resource.customizations.health.lifecycle.keptn.sh_KeptnAppVersion: |
        hs = {}
        hs.status = "Progressing"
        hs.message = "KeptnAppVersion is progressing"
        if obj.status.status == "Succeeded" then
          hs.status = "Healthy"
          hs.message = "KeptnAppVersion is healthy"
        end
        if obj.status.status == "Failed" then
          hs.status = "Degraded"
          hs.message = "KeptnAppVersion is degraded"
        end
        return hs

      resource.customizations.health.lifecycle.keptn.sh_KeptnWorkloadInstance: |
        hs = {}
        hs.status = "Progressing"
        hs.message = "KeptnWorkloadInstance is progressing"
        if obj.status.status == "Succeeded" then
          hs.status = "Healthy"
          hs.message = "KeptnWorkloadInstance is healthy"
        end
        if obj.status.status == "Failed" then
          hs.status = "Degraded"
          hs.message = "KeptnWorkloadInstance is degraded"
        end
        return hs

      resource.customizations.health.lifecycle.keptn.sh_KeptnTask: |
        hs = {}
        hs.status = "Progressing"
        hs.message = "KeptnTask is progressing"
        if obj.status.status == "Succeeded" then
          hs.status = "Healthy"
          hs.message = "KeptnTask is healthy"
        end
        if obj.status.status == "Failed" then
          hs.status = "Degraded"
          hs.message = "KeptnTask is degraded"
        end
        return hs

      resource.customizations.health.lifecycle.keptn.sh_KeptnEvaluation: |
        hs = {}
        hs.status = "Progressing"
        hs.message = "KeptnEvaluation is progressing"
        if obj.status.overallStatus == "Succeeded" then
          hs.status = "Healthy"
          hs.message = "KeptnEvaluation is healthy"
        end
        if obj.status.overallStatus == "Failed" then
          hs.status = "Degraded"
          hs.message = "KeptnEvaluation is degraded"
        end
        return hs

      resource.exclusions: |
        - apiGroups:
            - cilium.io
          kinds:
            - CiliumEndpoint
            - CiliumIdentity
            - PodInfo
          clusters:
            - "*"

    params:
      # -- Number of application status processors
      controller.status.processors: 20
      # -- Number of application operation processors
      controller.operation.processors: 20
      # -- Specifies timeout between application self heal attempts
      controller.self.heal.timeout.seconds: 15
      # -- Repo server RPC call timeout seconds.
      controller.repo.server.timeout.seconds: 180

      # -- Run server without TLS
      server.insecure: true

  controller:
    # args:
    #   # -- define the application controller `--status-processors`
    #   statusProcessors: "20"
    #   # -- define the application controller `--operation-processors`
    #   operationProcessors: "40"
    #   # -- define the application controller `--app-resync`
    #   appResyncPeriod: "360"
    #   # -- define the application controller `--self-heal-timeout-seconds`
    #   selfHealTimeout: "15"
    #   # -- define the application controller `--repo-server-timeout-seconds`
    #   repoServerTimeoutSeconds: "180"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix
      rules:
        enabled: true
        spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: "Argo CD: No reported applications"
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which means that it must be down or not
              functioning properly.  This needs to be resolved for this cloud to continue to maintain state.
        # - alert: ArgoAppNotSynced
        #   expr: |
        #     argocd_app_info{sync_status!="Synced"} == 1
        #   for: 12h
        #   labels:
        #     severity: warning
        #   annotations:
        #     summary: Application {{ "{{" }} $labels.name {{ "}}" }} not synchronized
        #     description: >
        #       The application [{{ "{{" }} $labels.name {{ "}}" }}] has not been synchronized for over
        #       12 hours which means that the state of this cloud has drifted away from the
        #       state inside Git.
        - alert: ArgoAppSyncStateOutOfSync
          annotations:
            description: The ArgoCD application {{ "{{" }} $labels.name {{ "}}" }} needs to be synced
            summary: An ArgoCD applications SyncState is OutOfSync for a unusally long time
          expr: sum(argocd_app_info{sync_status="Unknown"}) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: ArgoAppSyncStateUnknown
          annotations:
            description: The ArgoCD application {{ "{{" }} $labels.name {{ "}}" }} needs to be checked/validated
            summary: An ArgoCD applications SyncState is Unknown for a unusally long time
          expr: sum(argocd_app_info{sync_status="OutOfSync"}) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: ArgoAppHealthStateUnhealthy
          annotations:
            description: The ArgoCD application {{ "{{" }} $labels.name {{ "}}" }} is not getting in to a healthy state even
              after enough reconciliation time
            summary: An ArgoCD applications HealthState is not Healthy for an unsually long time
          expr: sum(argocd_app_info{health_status!="Healthy"}) >= 1
          for: 15m
          labels:
            severity: warning

  dex:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

  redis:
    enabled: true
    exporter:
      enabled: true
      image:
        repository: oliver006/redis_exporter
        tag: v1.67.0
      env:
      - name: REDIS_EXPORTER_LOG_FORMAT
        value: json
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: argocd-redis
            key: auth
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

  server:
    # extraArgs:
    #   - --insecure
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

    extensions:
      enabled: false

  repoServer:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

  notifications:
    secret:
      create: false
      name: argocd-notifications-secret
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          prometheus.io/operator: portefaix

    notifiers:
      service.slack: |
        token: $slack-token
      service.grafana: |
        apiUrl: https://grafana.example.com/api
        apiKey: $grafana-argo-cd-token

    subscriptions:
    # subscription for on-sync-status-unknown trigger notifications
    - recipients:
      - slack:portefaix-homelab-gitops
      triggers:
      - on-sync-status-unknown
    # # subscription restricted to applications with matching labels only
    # - recipients:
    #   - slack:portefaix-homelab-gitops
    #   selector: test=true
    #   triggers:
    #   - on-sync-status-unknown

    # see: https://github.com/argoproj/argo-cd/blob/master/notifications_catalog/install.yaml
    templates:
      template.app-created: |
        email:
          subject: Application {{.app.metadata.name}} has been created.
        message: Application {{.app.metadata.name}} has been created.
      template.app-deleted: |
        email:
          subject: Application {{.app.metadata.name}} has been deleted.
        message: Application {{.app.metadata.name}} has been deleted.
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        slack:
          attachments: |
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              },
              {
                "title": "Revision",
                "value": "{{.app.status.sync.revision}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-health-degraded: |
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#f4c030",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-running: |
        email:
          subject: Start syncing application {{.app.metadata.name}}.
        message: |
          The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#0DADEA",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "slack"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-succeeded: |
        email:
          subject: Application {{.app.metadata.name}} has been successfully synced.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]

    triggers:
      trigger.on-created: |
        - description: Application is created.
          oncePer: app.metadata.name
          send:
          - app-created
          when: "true"
      trigger.on-deleted: |
        - description: Application is deleted.
          oncePer: app.metadata.name
          send:
          - app-deleted
          when: app.metadata.deletionTimestamp != nil
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.operationState?.syncResult?.revision
          send:
          - app-deployed
          when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
            and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState != nil and app.status.operationState.phase in ['Error',
            'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']

      defaultTriggers: |
        - on-sync-status-unknown

    bots:
      slack:
        enabled: false
        service:
          type: ClusterIP

grafanaDashboard:
  enabled: true
  grafanaOperator:
    enabled: true
    matchLabels:
      grafana.com/dashboards: portefaix
